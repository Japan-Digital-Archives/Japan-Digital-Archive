

{# src/Zeega/\CoreBundle\/Resources/views/Widget/fail.widget.html.twig #}

{% extends '::widget.base.html.twig' %}

{% block title %} {% endblock %}

{% block body %}
  <style>
    .btn {
      margin-top: 10px;
    }
  </style>
	<div id="widget-wrapper" data-id="{{widget_id}}"> 
		{%if userId == 0 and app.environment != 'dev' %}
			<div class='widget-message'>Please login at <a href="http://jdarchive.org">jdarchive.org</a> to add content.</div>
		{% else %}
		
		
			{% if archive == 'Dropbox' %}
				{% if child_items_count == 0 %} <div id="results-count"><h3>Nothing new to add from Dropbox!</h3></div> 		
				{% elseif child_items_count == 1 %} <div id="results-count"><h3>1 New Item Found</h3></div> 
				{% else %} <div id="results-count"><h3>{{child_items_count}} New Items Found</h3></div>
				{% endif %}
			{% else %}
				{% if child_items_count == 0 %} <div id="results-count"><h3>1 Item Found</h3></div> 
				{% else %} <div id="results-count"><h3>{{child_items_count}} Items Found</h3></div>
				{% endif %}
			{% endif %}
		
			<div id="item-view">
				<div>
			
			<img style="max-width:150px; max-height:150px;" id="item-image" class="item-image"  />
			
			<div id="item-add" class="add-button">
				
			  {% if archive == 'Dropbox' %}  
				{% if child_items_count != 0 %}  <button id="add-item" class='btn btn-success'><i class="icon-inbox icon-white"></i>Add Dropbox Media  </i></button>{% endif %}
			  {% elseif update == '1' %} 
				<button id="add-item" class='btn btn-success'><i class="icon-inbox icon-white"></i> Update Media </button>
			  {% else %} 
				<input type='checkbox' id='add-to-archive' value='add-to-archive'>Add to Archive</input>
				  <br />
				<button id="add-item-new" class='btn btn-success'><i class="icon-inbox icon-white"></i> Add Media </button>
			  {% endif %}

			</div>
				</div>
				<div style="clear:both;">&nbsp;</div>
				<div class='widget-message' id="begin-message"></div>
			
				{% if archive == 'Dropbox' %}
			<div class='widget-message' id="message">Dropbox media successfully added to your JDA Collection.</div>
				{% else %}
			<div class='widget-message' id="message">Media successfully added to your JDA Collection.</div>
			<div style="clear:both;">&nbsp;</div>
			<div id="message"></div>
				{% endif %}
						
				<h3>Media-type</h3>
				<div class="ingest-info">
					<select id="widget-media">
						<option value="Image">Image</option>
						<option value="Website">Website</option>
						<option value="Audio">Audio</option>
						<option value="Video">Video</option>
						<option value="Tweet">Tweet</option>
					</select>
				</div>
			

				<div id="website-fields" style="display:none">
					<h3>Archive Frequency</h3>
					<div class="ingest-info">
						<select id="widget-frequency">
							<option value="Once">Archive Once</option>
							<option value="Monthly">Monthly</option>
						</select>
					</div>

					<h3>Archive Scope</h3>
					<div class="ingest-info">
						<select id="widget-scope">
							<option value="Page">One Page</option>
							<option value="Directory">Directory</option>
							<option value="Site">Full Site</option>
						</select>
					</div>
				</div>
				
				
				<h3>Collection</h3>
				<div class="ingest-info">
					<select id="widget-collection"></select>
				</div>
				
        <h3>URI</h3>
        <div class="ingest-info"><input type="text" id="widget-uri"></div>

				<h3>Title</h3>
				<div class='ingest-info'><input type="text" id="widget-title"></div>
				
        <h3>Description:</h3>
				<div id="description">
			
				<div class="widget-textbox ingest-info">
				  <textarea id="widget-description" ></textarea>
				</div>
			
				<h3>Tags (comma separated):</h3>
				<div id="tags">
					<div class="widget-textbox ingest-info">
					  <textarea id="widget-tags" ></textarea>
					</div>
				</div>

        <h3>Date:</h3>
        <div id="Date">
        <div class='ingest-info'> <input type="text" id="datepicker"> </div>
        </div>

        
        <h3>Language:</h3>
        <div id="Language">
        <div class='ingest-info'>
        <input type="checkbox" class="languageChk" id="englishChk" value="English">English / 英語<br>
        <input type="checkbox" class="languageChk" id="japaneseChk" value="Japanese">Japanese / 日本語<br>
        <input type="checkbox" class="languageChk" id="chineseChk" value="Chinese">Chinese / 中国語<br>
		<input type="checkbox" class="languageChk" id="koreanChk" value="Korean">Korean / 韓国語<br>
        </div>
        </div>

				<h3>Location:</h3>
				<div class="ingest-info">
				  <input type="text" id="address" name="location" size="60" /> &nbsp;&nbsp;
				  <button type="button" onclick="showAddress();" class="btn">Find on Map!</button>
				  <div>
					<span class="hint">{% trans %}jda.form.contribute.map.hint{% endtrans %}</span>
				  </div>
				  <div id="map_canvas" style="width: 250px; height: 200px"></div>
				  <div id="latlng"></div>
				  <input type="hidden" id="lat" name="lat" value="" />
				  <input type="hidden" id="lng" name="lng" value="" />
				</div>
			</div>
		</div>
			
		{% endif %}
			
	</div><!--widget-wrapper-->

	<script type="text/javascript" language="Javascript">
		//bootstrapping data
		var itemJSON = "{{item|e('js')}}";
	</script>	


   <!--<script src="http://code.jquery.com/jquery-1.10.1.min.js" charset="UTF-8"></script>-->

	<script type="text/javascript" language="Javascript">
  
   $(function() {
       $( "#datepicker" ).datepicker();
   });

    var layerMediaMap = {
        Video: "Youtube",
        Website: "Website",
        Document: "PDF",
        Image: "Image",
        Audio: "Audio",
        Tweet: "Tweet"
    };
        
    sessionStorage.apiUrl = "http://jdarchive.org/zeega/";	
    sessionStorage.user = {{ userId }};

    initializeMap();

    var postObj = {};
    $.get(sessionStorage.apiUrl+"api/items/parser?url={{ thumbnail_url }}", function(data) {
    	postObj = data.items[0];
    	postObj.user_id = {{ userId }};
    	
    	var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    	var newhash = {};
    	$.each(hashes, function(i, val) { 
    		var hash = val.split("="); 
    		newhash[hash[0]]= hash[1];
    	})
    	
    	
    	postObj.uri = decodeURIComponent(newhash.url);  
    	postObj.attribution_uri = postObj.uri;
		$("#widget-uri").val(postObj.uri);

    	if(postObj.title == null || postObj.title == "") postObj.title = "{{ title }}";
    	if(postObj.media_type == null) {
    		postObj.media_type = "Website";
    		postObj.archive = "Internet Archive";
    		$("#website-fields").show();
			postObj.uri = "http://wayback.archive-it.org/2438/20110301000000/" + postObj.attribution_uri;
    	}
		var today = new Date().toDateString();
		if(postObj.media_date_created == null || postObj.media_date_created == "") postObj.media_date_created = today;

    	postObj.username = "{{ displayname }}";
    	$("#widget-description").val(postObj.description);
    	$("#widget-title").val(postObj.title);
      $("datepicker").val(postObj.media_date_created);
    	$("#item-image").attr("src", postObj.thumbnail_url);

    	if(postObj.uri.indexOf("twitter.com") > -1) {
    		postObj.media_type = "Tweet";

    		var url_array = postObj.uri.split("/");
    		var id = url_array.pop();
    		postObj.attribution_uri = postObj.uri;
    		postObj.uri = id;
				var cb = new Codebird;
				cb.setConsumerKey("D31EL4VBtCk6TSiwG2MAw", "QUzeHgHSweIC3wSDLUu8Y3jEzkgvYfYkXyTqeg5MSs");
				cb.setBearerToken("AAAAAAAAAAAAAAAAAAAAAAvCTQAAAAAAM%2FIZB80G7W1l2QpDZfN11HuoWVI%3DSTyXQGeOjTbf49FcCrs1Mil1PhCreVOlzaSN6Sl3g");
				cb.__call(
					"statuses_show_ID",
					"id="+id,
					function (reply) {
						postObj.media_date_created = "";
						postObj.description = reply.text;
						postObj.text = reply.text;
						postObj.title = "";
							$("#widget-description").val(postObj.description);
							$("#widget-title").val(postObj.title);
							var created_date = new Date(Date.parse(reply.created_at, "m/d/Y H:i")).toDateString();
							postObj.media_date_created = created_date;
							postObj.thumbnail_url = reply.user.profile_image_url;
						$("#item-image").attr("src", postObj.thumbnail_url);
						$("#item-image").css("width", "48px");
					},
					true // this parameter required
				);
			} else if(postObj.uri.indexOf("youtube.com") > -1) {
				var id = postObj.uri.split("v=")[1];
				postObj.uri = id;
		
			}
			
    	$("#widget-media option[value$='"+postObj.media_type+"']").attr('selected', true);
    });
    
    $("#add-item-new").click(function() {
    	if($("#widget-title").val() == "" || $("#widget-title").val() == " ") {
    		alert("Please fill in a title field before submitting.");
    		return;
    	}

      	if($("#widget-uri").val() == "" || $("#widget-uri").val() == " ") {
        	alert("Please fill in a URI for your submission.");
        	return;
		}
		
		var checkboxes = document.getElementsByClassName("languageChk");
		var lent = checkboxes.length;
		var checkedCount = 0;
		for (i = 0; i < lent; i++) {
			if (checkboxes[i].checked) {
				checkedCount+=1;
			}
		}

		if (checkedCount == 0) {
			alert("Please select a language before submitting.");
			return;
		}

    	var Browser = jda.module("browser");
    	
    	var trayId = $("#widget-collection > option:selected").val();
    	var trayName = $("#widget-collection > option:selected").text();
    	
    	var activeCollection = new Browser.Items.Model({id:trayId});

    	
    	activeCollection.fetch({
        success : function (model, response) {
          console.log(model);
          //save new item to archive
  
          var baseApiUrl = sessionStorage.apiUrl+"api/items?api_key=9bIRe71qSeHeVQIcb54NNqY-y&force_key=true"

          var mediaPrefix = "";
          if(!$("#add-to-archive").prop("checked")) {
            mediaPrefix = "outside-";
          }
          postObj.title = $("#widget-title").val();
          postObj.description = $("#widget-description").val();
          postObj.layer_type = mediaPrefix + layerMediaMap[$("#widget-media > option:selected").val()]; 
          postObj.media_creator_username = "{{ displayname }}";
          postObj.media_creator_realname = "{{ displayname }}";
          postObj.attributes = {};
          postObj.attributes.submitterId = "{{ userId }}";

       	  
          postObj.tags = [];
          var tags = $("#widget-tags").val().split(",");
          $.each(tags, function(i, tag) {
			  if(tag != '' && tag!=' ' && tag){
				  postObj.tags.push(tag.trim());
			  }
          });
		  postObj.tags.filter(Boolean);

          postObj.media_type = $("#widget-media > option:selected").val(); 
        
          if(postObj.media_type == "Website") {
			  postObj.attributes.scope = $("#widget-scope").val();
			  postObj.attributes.frequency = $("#widget-frequency").val();
       	  }    
		  
		  var dateValue = $("#datepicker").val();
		  if (!dateValue){ // true if empty 
			  postObj.media_date_created = new Date().toDateString();
		  }
		  else { // true if not empty
			  postObj.media_date_created = dateValue;
		  }
		  
          postObj.date_created = new Date().toDateString();


          postObj.attributes.language = $("#englishChk").is(":checked") ? "English|" : "";
		  postObj.attributes.language += $("#japaneseChk").is(":checked") ? "Japanese|" : "";
		  postObj.attributes.language += $("#chineseChk").is(":checked") ? "Chinese|" : "";
		  postObj.attributes.language += $("#koreanChk").is(":checked") ? "Korean|" : "";
          
          if ($("#lat").val() != "") {
            postObj.media_geo_latitude = parseFloat($("#lat").val());
            postObj.media_geo_longitude = parseFloat($("#lng").val());
          }
            
          $("#results-count").html("");
          $("#item-view").html("");
      
          $.post(baseApiUrl, postObj)
            .error(function () { 
              alert("There was a problem with your submission, please try again"); 
            })
            .success(function (newitem) {
              console.log("created new item "+newitem.items[0].id);
                  
              activeCollection.url= sessionStorage.apiUrl + "api/items/"+trayId+"/items";
              activeCollection.save({new_items:[newitem.items[0].id]}, {
                success : function(model, tray_update_response) {
                  console.log(tray_update_response);
                  $("#item-view").html("<h3>" + postObj.title+" added to " + trayName+"!</h3>");
                },
                error : function(model, tray_update_response) {
                  console.log(tray_update_response);
                  $("#item-view").html("<h3>There was a problem adding this item!</h3>");
                }
              });
            });
        },
        error : function(model, response){
          console.log('Failed to fetch the user object.');            
          $("#item-view").html("<h3>There was a problem adding this item!</h3>");
        }
      });
    });
    //taken from form.js
      
    var map;
    var geocoder;
    var marker;

    function initializeMap() {
      var latlng = new google.maps.LatLng(38.268215, 140.869356);
      var myOptions = {
        zoom: 8,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map(document.getElementById("map_canvas"),
          myOptions);

      geocoder = new google.maps.Geocoder();

      marker = new google.maps.Marker({
        position: latlng,
        map: map,
      });

      marker.setDraggable(true);
      google.maps.event.addListener(
        marker,
        'dragend',
        function () {
          var newpos = marker.getPosition();
          $('#latlng').html(newpos.toString());
          $('#lat').val(newpos.lat());
          $('#lng').val(newpos.lng());
        });
    }

    function showAddress() {
      var address = $('#address').val();
      var geocoderRequest = {
        address: address
      };
      geocoder.geocode(
        geocoderRequest,
        function (result, status) {
          if (status != 'OK') {
            alert('Google could not locate this address.');
            return;
          }
          var latlng = result[0].geometry.location;
          map.setCenter(latlng);
          marker.setPosition(latlng);
          $('#latlng').html(latlng.toString());
          $('#lat').val(latlng.lat());
          $('#lng').val(latlng.lng());
        });
    }

    function initMultiMap() {
      JA_Map.instance = new JA_Map(38.268215, 140.869356, 5, 'map_canvas', google.maps.MapTypeId.ROADMAP);


      $(JA_Map.instance.addButton.button).click(function () {
          new JA_Marker(JA_Map.instance.map, JA_Map.instance.map.getCenter());
      });

      $('#geocode_button').click(function () {
          JA_Map.instance.showAddress($('#address').val());
      });

      $('input#address').bind("keypress", function (e) {
        if (e.keyCode == 13) {
          JA_Map.instance.showAddress($('#address').val());
          e.preventDefault();
        }
      });

      // Prefill

      if (typeof JA.lat == 'object' & JA.lat != null) {
        $.each(JA.lat, function (idx, val) {
          var latlng = new google.maps.LatLng(parseFloat(val), parseFloat(JA.lng[idx]));
          var marker = new JA_Marker(JA_Map.instance.map, latlng);
          marker.setName(JA.location_name[idx]);
        });
      }

      JA_Marker.showAll();
    }
       
//////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// JA_Marker

    var JA = {
      "language": "en",
      "readonly": false,
      "i18n": {
        "add_location": "add location",
        "delete_confirmation_title": "Confirm deletion",
        "button_delete_submission": "Delete submission",
        "button_cancel": "Cancel",
        "remove_location": "remove",
        "google_could_not_find_address": "Google could not find the address",
        "add_image_button": "Upload an image",
        "image_delete": "remove image",
        "upload_failed": "Failed",
        "upload_typeError": "{file} has invalid extension. Only {extensions} are allowed.",
        "upload_sizeError": "{file} is too large, maximum file size is {sizeLimit}.",
        "upload_minSizeError": "{file} is too small, minimum file size is {minSizeLimit}.",
        "upload_emptyError": "{file} is empty, please select files again without it.",
        "upload_onLeave": "The files are being uploaded, if you leave now the upload will be cancelled."
      }, "imageUpload": { "allowedExtensions": ["jpeg", "jpg", "png"], "sizeLimit": 2097152 }
    };
    JA.t = function (key) {
      if (JA.i18n[key]) {
        return JA.i18n[key];
      }
      if (typeof JA.i18n_missing == 'undefined') {
        JA.i18n_missing = [];
      }
      JA.i18n_missing[JA.i18n_missing.length] = key;
      return key;
    };

    // Class methods/variables
    JA_Marker = $.extend(
      function JA_Marker(map, latlng) {
          this.initialize(map, latlng);
      }, 
      {
        count: 0,
        all: [],
        getSouthWest: function() 
        {
          var lat = 90, lng = 180;
          $.each(JA_Marker.all, function(i, mark) {
            mark = mark.getPosition();
            if (mark.lat() < lat) {
                lat = mark.lat();
            }
            if (mark.lng() < lng) {
                lng = mark.lng();
            }
          });
          return new google.maps.LatLng(lat, lng);
        },
        getNorthEast: function() 
        {
          var lat = -90, lng = -180;
          $.each(JA_Marker.all, function(i, mark) {
            mark = mark.getPosition();
            if (mark.lat() > lat) {
                lat = mark.lat();
            }
            if (mark.lng() > lng) {
                lng = mark.lng();
            }
          });
          return new google.maps.LatLng(lat, lng);
        },
        getBounds: function() 
        {
          return new google.maps.LatLngBounds(this.getSouthWest(), this.getNorthEast());
        },
        latest: function() {
          return JA_Marker.all[JA_Marker.all.length - 1];
        },
        showAll: function() {
          if (this.count == 1) {
            JA_Map.instance.map.panTo(this.latest().getPosition());
          } 
          if (this.count > 1) {
            JA_Map.instance.map.fitBounds(this.getBounds());
          }
        }
      }
    );

    // Instance variables + inherit from google.maps.Marker
    $.extend(
      JA_Marker.prototype,
      new google.maps.Marker(),
      {
        initialize: function(map, latlng) 
        {
          this.index = JA_Marker.count++;
          JA_Marker.all[this.index] = this;
          
          this.setPosition(latlng);
          this.setDraggable(true);
          this.setIcon(new google.maps.MarkerImage(this.iconUrl()));
          this.setMap(map);
          this.addToPage();

          this.updateHtml();
          google.maps.event.addListener(
            this,
            'dragend',
            this.updateHtml
          );
          
          $('#ja_marker_' + this.index + ' img, #ja_marker_' + this.index + ' .panTo').click(function(e) {
            idx = parseInt($(this).parent().attr('rel'));
            marker = JA_Marker.all[idx];
            marker.getMap().panTo(marker.getPosition());
            e.preventDefault();
          });
          
          $('#location_list .remove').click(function(e) {
            idx = parseInt($(this).parent().attr('rel'));
            marker = JA_Marker.all[idx];
            $('#ja_marker_' + $(this).parent().attr('rel')).remove();
            marker.setMap(null);
            e.preventDefault();
          });
        },
        iconUrl: function()
        {
          var url = window.location.href;
          url = url.substring(0, url.indexOf("web/"));
          return url + 'web/images/markers/red_' + String.fromCharCode(65 + this.index) + '.png';
        },
        toStr: function() 
        {
          return '' + Math.round(this.getPosition().lat()*10000)/10000 + ', ' + Math.round(this.getPosition().lng()*10000)/10000;
        },
        addToPage: function() {
          $('#location_list').append(
            '<li id="ja_marker_' + this.index + '" rel="' + this.index + '" >' +
            '<img src="' + this.iconUrl() + '" /> ' +
            '<' + (JA.readonly ? 'span' : 'input') + 
            ' type="text" class="location_name" name="location_name[' + this.index + ']" value="" /> ' +
            '<span class="panTo caption" href="#"></span> ' +
            (JA.readonly ? '' : '<a class="remove" href="#">(' + JA.t('remove_location') + ')</a> ') + 
            '<input type="hidden" class="lat" name="lat[' + this.index + ']" value="" /> ' +
            '<input type="hidden" class="lng" name="lng[' + this.index + ']" value="" /> ' +
            '</li>'
          );
        },
        updateHtml: function() {
          this.setCaption(this.toStr());
          latlng = this.getPosition();
          lat = latlng.lat();
          lng = latlng.lng();
          $('#ja_marker_' + this.index + ' .lat').attr('value', lat);
          $('#ja_marker_' + this.index + ' .lng').attr('value', lng);
        },
        setCaption: function(caption) {
          $('#ja_marker_' + this.index + ' .caption').html('(' + caption + ')');
        },
        setName: function(name) {
          if (JA.readonly) {
            $('#ja_marker_' + this.index + ' .location_name').html(name);
          } else {
            $('#ja_marker_' + this.index + ' .location_name').attr('value', name);
          }
        },
        makeVisible: function() {
          this.getMap().panTo(this.getPosition());
        }
      }
    );

////////////////////////////////////////////////////////////////////////////////
// JA_Image_Marker
    function JA_Image_Marker(map, latlng, image_id) {
      this.initialize(map, latlng, image_id);
    }

    $.extend(
      JA_Image_Marker.prototype,
      JA_Marker.prototype,
      {
        initialize: function(map, latlng, image_id) 
        {
          this.image_id = image_id;
          this.index = JA_Marker.count++;
          JA_Marker.all[this.index] = this;
          
          this.setPosition(latlng);
          this.setDraggable(JA.readonly ? false : true);
          this.setIcon(new google.maps.MarkerImage(this.iconUrl()));
          this.setMap(map);
          this.addToPage();

          this.updateHtml();
          google.maps.event.addListener(
            this,
            'dragend',
            this.updateHtml
          );
        },
        iconUrl: function()
        {
          return '/mvc/img/markers/green_' + String.fromCharCode(65 + this.index) + '.png';
        },
        addToPage: function()
        {
          $('#' + this.image_id + ' .marker_info')
            .html(
              '<div class="image_marker" id="ja_marker_' + 
              this.index + '" rel="' + this.index + '" >' +
              '<img src="' + this.iconUrl() + '" />' +
              '<span class="caption" href="#"></span>' +
              '</div>'
            );
        },
        updateHtml: function() 
        {
          this.setCaption(this.toStr());
          latlng = this.getPosition();
          lat = latlng.lat();
          lng = latlng.lng();
          $('#' + this.image_id + ' .lat').attr('value', lat);
          $('#' + this.image_id + ' .lng').attr('value', lng);
        }
      }
    );

/////////////////////////////////////////////////////////////////////////////////////////////////
// JA_Button

    function JA_Button(map) {
      this.button = document.createElement("div");
      this.button.innerHTML = JA.t('add_location');

      map.controls[google.maps.ControlPosition.TOP_RIGHT].push(this.button);

      this.setButtonStyle_ = function(button) {
        $(button).attr('style', '\
          color: #44c;\
          background-color: #fff;\
          font-family: "Trebuchet MS", Helvetica, Arial, sans-serif;\
          font-size: 13px;\
          padding: 1px;\
          margin-top: 5px;\
          text-align: center;\
          width: 8em;\
          cursor: pointer;\
          border-radius: 8px;\
          -webkit-border-radius: 8px;\
          -moz-border-radius: 8px;\
          border: 1px solid black;'
        );
      };

      this.setButtonStyle_(this.button);
    };


/////////////////////////////////////////////////////////////////////////////////////////////////
// JA_Map

    function JA_Map(lat, lng, zoom, id, type) 
    {
      this.latlng = new google.maps.LatLng(lat, lng);
      this.options = {
        zoom: zoom,
        center: this.latlng,
        mapTypeId: type,
        size: new google.maps.Size(520,300)
      };
      this.map = new google.maps.Map(document.getElementById(id), this.options);
      this.geocoder = new google.maps.Geocoder();
      
      if (!JA.readonly) {
        this.addButton = new JA_Button(this.map);
      }
    }

    JA_Map.prototype = {
      showAddress: function(address) {
        geocoderRequest = {
          address: address
        };
        var self = this;
        var map = this.map;
        var marker = this.marker;
        this.geocoder.geocode(
          geocoderRequest,
          function(result, status) {
            if (status != 'OK') {
              alert(JA.t('google_could_not_find_address'));
              return;
            }
            var latlng = result[0].geometry.location;
            map.setCenter(latlng);
            if (!self.marker) {
              var marker = self.createMarker(map, map.getCenter());
            }
            marker.setName(address);
          }
        );
      },
      createMarker: function(map, center) {
        return new JA_Marker(map, center);
      }
    };

    JA.setImageLocation = function(id) {
      if (typeof JA.images == 'undefined') {
        JA.images=[];        
      }
      if (JA.images[id]) { 
        var marker = JA.images[id];
        var image_id = id;
        var geocoderRequest = {
          address: $('#image_address_' + id).attr('value')
        };
        JA_Map.instance.geocoder.geocode(
          geocoderRequest,
          function(result, status) {
            if (status != 'OK') {
              alert(JA.t('google_could_not_find_address'));
              return;
            }
            var latlng = result[0].geometry.location;
            JA.images[id].setPosition(latlng);
            
            JA.images[id].updateHtml();
            JA.images[id].makeVisible();
          }
        );
      } else {
        var image_id = id;
        var geocoderRequest = {
          address: $('#image_address_' + id).attr('value')
        };
        JA_Map.instance.geocoder.geocode(
          geocoderRequest,
          function(result, status) {
            if (status != 'OK') {
              alert(JA.t('google_could_not_find_address'));
              return;
            }
            var latlng = result[0].geometry.location;
            var marker = new JA_Image_Marker(JA_Map.instance.map, latlng, 'image_location_' + image_id);
            JA.images[image_id] = marker;
            
            JA.images[id].updateHtml();
            JA.images[id].makeVisible();
          }
        );
      }
      return false;
    };
	</script>	
{% endblock %}
